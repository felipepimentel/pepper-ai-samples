#!/usr/bin/env python
"""
Intermediate A2A protocol implementation showing agent networking.
This agent can communicate with other agents to access their capabilities.
"""
import os
import json
import asyncio
import aiohttp
import uuid
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any, Set
from fastapi import FastAPI, HTTPException, Request, Response, Depends
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# A2A protocol type definitions
class AgentCapabilities:
    """Agent capabilities definition."""
    def __init__(self, streaming: bool = False, push_notifications: bool = False):
        self.streaming = streaming
        self.push_notifications = push_notifications
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "streaming": self.streaming,
            "pushNotifications": self.push_notifications
        }

class AgentSkill:
    """Agent skill definition."""
    def __init__(self, id: str, name: str, description: str):
        self.id = id
        self.name = name
        self.description = description
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "id": self.id,
            "name": self.name,
            "description": self.description
        }

class AgentCard:
    """Agent card definition containing metadata about the agent."""
    def __init__(
        self,
        name: str,
        description: str,
        url: str,
        version: str,
        capabilities: AgentCapabilities,
        skills: List[AgentSkill]
    ):
        self.name = name
        self.description = description
        self.url = url
        self.version = version
        self.capabilities = capabilities
        self.skills = skills
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "name": self.name,
            "description": self.description,
            "url": self.url,
            "version": self.version,
            "capabilities": self.capabilities.to_dict(),
            "skills": [skill.to_dict() for skill in self.skills]
        }

class TextPart:
    """Text message part."""
    def __init__(self, text: str):
        self.text = text
        self.type = "text"
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "type": self.type,
            "text": self.text
        }

class DataPart:
    """Structured data message part."""
    def __init__(self, data: Dict[str, Any]):
        self.data = data
        self.type = "data"
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "type": self.type,
            "data": self.data
        }

class Message:
    """Message with one or more parts."""
    def __init__(self, role: str, parts: List[Any]):
        self.role = role
        self.parts = parts
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "role": self.role,
            "parts": [part.to_dict() for part in self.parts]
        }

class Artifact:
    """Artifact generated by an agent."""
    def __init__(self, name: str, description: str, parts: List[Any], index: int = 0):
        self.name = name
        self.description = description
        self.parts = parts
        self.index = index
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "name": self.name,
            "description": self.description,
            "parts": [part.to_dict() for part in self.parts],
            "index": self.index
        }

class TaskStatus:
    """Task status information."""
    def __init__(self, state: str, message: Optional[Message] = None, timestamp: Optional[str] = None):
        self.state = state
        self.message = message
        self.timestamp = timestamp or datetime.now(timezone.utc).isoformat()
    
    def to_dict(self) -> Dict[str, Any]:
        result = {
            "state": self.state,
            "timestamp": self.timestamp
        }
        if self.message:
            result["message"] = self.message.to_dict()
        return result

class Task:
    """Task object representing a unit of work."""
    def __init__(
        self, 
        id: str, 
        session_id: Optional[str] = None, 
        status: Optional[TaskStatus] = None,
        artifacts: Optional[List[Artifact]] = None
    ):
        self.id = id
        self.session_id = session_id
        self.status = status
        self.artifacts = artifacts or []
        # Additional fields for tracking agent communications
        self.delegated_tasks: Dict[str, Dict[str, Any]] = {}
    
    def to_dict(self) -> Dict[str, Any]:
        result = {
            "id": self.id
        }
        if self.session_id:
            result["sessionId"] = self.session_id
        if self.status:
            result["status"] = self.status.to_dict()
        if self.artifacts:
            result["artifacts"] = [artifact.to_dict() for artifact in self.artifacts]
        return result

# Task state constants
class TaskState:
    """Task state constants."""
    SUBMITTED = "submitted"
    WORKING = "working"
    INPUT_REQUIRED = "input_required"
    COMPLETED = "completed"
    FAILED = "failed"

# In-memory storage
tasks: Dict[str, Task] = {}
known_agents: Dict[str, AgentCard] = {}
agent_skills: Dict[str, Set[str]] = {}

# A2A Client for inter-agent communication
class A2AClient:
    """Client for communicating with other A2A agents."""
    
    def __init__(self, agent_url: str):
        """Initialize the A2A client with the agent URL."""
        self.agent_url = agent_url.rstrip("/")
    
    async def get_agent_card(self) -> Dict[str, Any]:
        """Retrieve the agent card to discover agent capabilities."""
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{self.agent_url}/.well-known/agent.json") as response:
                if response.status != 200:
                    raise Exception(f"Failed to get agent card: {response.status}")
                return await response.json()
    
    async def create_task(self, task_id: str, session_id: Optional[str] = None) -> Dict[str, Any]:
        """Create a new task on the agent."""
        payload = {"id": task_id}
        if session_id:
            payload["sessionId"] = session_id
            
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{self.agent_url}/tasks",
                json=payload
            ) as response:
                if response.status != 200:
                    raise Exception(f"Failed to create task: {response.status}")
                return await response.json()
    
    async def send_message(self, task_id: str, message: Dict[str, Any]) -> Dict[str, Any]:
        """Send a message to a task."""
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{self.agent_url}/tasks/{task_id}/send",
                json=message
            ) as response:
                if response.status != 200:
                    raise Exception(f"Failed to send message: {response.status}")
                return await response.json()
    
    async def get_task(self, task_id: str) -> Dict[str, Any]:
        """Get the current state of a task."""
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{self.agent_url}/tasks/{task_id}") as response:
                if response.status != 200:
                    raise Exception(f"Failed to get task: {response.status}")
                return await response.json()

# Create a FastAPI application
app = FastAPI(title="A2A Network Agent", description="Agent demonstrating network communication capabilities")

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Define our agent card
agent_card = AgentCard(
    name="A2A Network Hub",
    description="Agent that can discover and communicate with other agents",
    url="http://localhost:8001",
    version="1.0.0",
    capabilities=AgentCapabilities(
        streaming=True,
        push_notifications=True
    ),
    skills=[
        AgentSkill(
            id="agent_discovery",
            name="Agent Discovery",
            description="Discovers and connects to other A2A agents"
        ),
        AgentSkill(
            id="capability_delegation",
            name="Capability Delegation",
            description="Delegates tasks to specialized agents"
        ),
        AgentSkill(
            id="orchestration",
            name="Agent Orchestration",
            description="Coordinates tasks across multiple agents"
        )
    ]
)

# Create an agent registry directory
@app.on_event("startup")
async def startup_event():
    """Initialize agent registry on startup."""
    # Add self to known agents
    known_agents["self"] = agent_card
    for skill in agent_card.skills:
        if skill.id not in agent_skills:
            agent_skills[skill.id] = set()
        agent_skills[skill.id].add("self")

# Define agent card endpoint
@app.get("/.well-known/agent.json")
async def get_agent_card():
    """Returns the agent card in the A2A protocol format."""
    return agent_card.to_dict()

# Task creation endpoint
@app.post("/tasks")
async def create_task(task_data: Dict[str, Any]):
    """Creates a new task."""
    task_id = task_data.get("id")
    if not task_id:
        raise HTTPException(status_code=400, detail="Task ID is required")
    
    session_id = task_data.get("sessionId")
    
    # Create a new task with submitted status
    task = Task(
        id=task_id,
        session_id=session_id,
        status=TaskStatus(
            state=TaskState.SUBMITTED,
            timestamp=datetime.now(timezone.utc).isoformat()
        )
    )
    
    # Store the task
    tasks[task_id] = task
    
    return task.to_dict()

# Send message to a task
@app.post("/tasks/{task_id}/send")
async def send_message(task_id: str, request: Request):
    """Sends a message to a task."""
    # Check if task exists
    if task_id not in tasks:
        raise HTTPException(status_code=404, detail=f"Task {task_id} not found")
    
    # Get the message from request
    message_data = await request.json()
    
    # Process the message
    task = await process_message(task_id, message_data)
    
    return task.to_dict()

# Get task status
@app.get("/tasks/{task_id}")
async def get_task(task_id: str):
    """Gets the current state of a task."""
    if task_id not in tasks:
        raise HTTPException(status_code=404, detail=f"Task {task_id} not found")
    
    return tasks[task_id].to_dict()

# Agent discovery endpoint
@app.post("/agents/discover")
async def discover_agent(agent_data: Dict[str, Any]):
    """Discovers and registers a new agent."""
    agent_url = agent_data.get("url")
    if not agent_url:
        raise HTTPException(status_code=400, detail="Agent URL is required")
    
    try:
        # Create a client to interact with the agent
        client = A2AClient(agent_url)
        
        # Get the agent card
        agent_card_data = await client.get_agent_card()
        
        # Register the agent in our registry
        agent_id = agent_card_data.get("name", str(uuid.uuid4()))
        known_agents[agent_id] = agent_card_data
        
        # Register the agent's skills
        if "skills" in agent_card_data:
            for skill in agent_card_data["skills"]:
                skill_id = skill.get("id")
                if skill_id:
                    if skill_id not in agent_skills:
                        agent_skills[skill_id] = set()
                    agent_skills[skill_id].add(agent_id)
        
        return {"status": "success", "agent_id": agent_id, "agent_card": agent_card_data}
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to discover agent: {str(e)}")

# List known agents endpoint
@app.get("/agents")
async def list_agents():
    """Lists all known agents."""
    return {"agents": list(known_agents.values())}

# Message processing
async def process_message(task_id: str, message_data: Dict[str, Any]) -> Task:
    """Process a message and update the task."""
    # Get the existing task
    task = tasks[task_id]
    
    # Update task status to working
    task.status = TaskStatus(
        state=TaskState.WORKING,
        timestamp=datetime.now(timezone.utc).isoformat()
    )
    
    # Extract message text
    text = ""
    if "parts" in message_data and len(message_data["parts"]) > 0:
        part = message_data["parts"][0]
        if part.get("type") == "text":
            text = part.get("text", "")
    
    # Process based on message content
    response_text = ""
    
    if "discover" in text.lower() and "agent" in text.lower():
        # Agent discovery request
        url_match = text.lower().split("http://")
        if len(url_match) > 1:
            agent_url = "http://" + url_match[1].split()[0]
            try:
                # Attempt to discover the agent
                result = await discover_agent({"url": agent_url})
                response_text = f"Successfully discovered agent: {result['agent_id']}"
            except Exception as e:
                response_text = f"Failed to discover agent: {str(e)}"
        else:
            response_text = "Please provide a valid agent URL to discover (http://...)"
    
    elif "list agents" in text.lower():
        # List known agents
        if known_agents:
            response_text = "Known agents:\n\n"
            for agent_id, card in known_agents.items():
                if isinstance(card, dict):
                    name = card.get("name", agent_id)
                    description = card.get("description", "No description")
                    response_text += f"- {name}: {description}\n"
                else:
                    # Handle case where card is an AgentCard object
                    response_text += f"- {card.name}: {card.description}\n"
        else:
            response_text = "No agents discovered yet."
    
    elif "weather" in text.lower() or "clima" in text.lower():
        # Check if we have a weather agent registered
        if "weather_forecast" in agent_skills:
            weather_agents = agent_skills["weather_forecast"]
            if weather_agents:
                # Get the first weather agent
                agent_id = next(iter(weather_agents))
                if agent_id != "self":  # Don't delegate to self
                    agent_card_data = known_agents[agent_id]
                    if isinstance(agent_card_data, dict):
                        agent_url = agent_card_data.get("url")
                    else:
                        agent_url = agent_card_data.url
                    
                    # Delegate the weather query to the specialized agent
                    try:
                        # Create a unique task ID for the delegated task
                        delegated_task_id = f"delegated_{task_id}_{str(uuid.uuid4())[:8]}"
                        
                        # Create a client to interact with the weather agent
                        weather_client = A2AClient(agent_url)
                        
                        # Create a new task on the weather agent
                        await weather_client.create_task(delegated_task_id)
                        
                        # Send the user's message to the weather agent
                        weather_task = await weather_client.send_message(
                            delegated_task_id,
                            message_data
                        )
                        
                        # Track the delegated task
                        task.delegated_tasks[delegated_task_id] = {
                            "agent_id": agent_id,
                            "agent_url": agent_url,
                            "original_task_id": task_id
                        }
                        
                        # Extract the response from the weather agent
                        if (
                            "status" in weather_task 
                            and "message" in weather_task["status"]
                            and "parts" in weather_task["status"]["message"]
                            and len(weather_task["status"]["message"]["parts"]) > 0
                        ):
                            weather_response = weather_task["status"]["message"]["parts"][0]["text"]
                            response_text = f"I delegated your weather question to our specialized weather agent. Here's their response:\n\n{weather_response}"
                        else:
                            response_text = "I delegated your weather question, but the weather agent didn't provide a response."
                    
                    except Exception as e:
                        response_text = f"Failed to get weather information: {str(e)}"
                else:
                    response_text = "I can help with weather information, but I don't have access to real weather data. Please discover and connect to a specialized weather agent first."
            else:
                response_text = "I don't have any weather agents registered. Please discover a weather agent first."
        else:
            response_text = "I don't have any weather agents registered. Please discover a weather agent first."
    
    else:
        # Default response
        response_text = (
            "I'm a network hub agent that can discover and communicate with other A2A agents. "
            "I can help you with:\n\n"
            "1. Discovering agents ('discover agent http://...')\n"
            "2. Listing known agents ('list agents')\n"
            "3. Delegating tasks to specialized agents (e.g., ask about weather)\n\n"
            "What would you like to do?"
        )
    
    # Create response message
    response_message = Message(
        role="agent",
        parts=[TextPart(text=response_text)]
    )
    
    # Update task with completed status and response
    task.status = TaskStatus(
        state=TaskState.COMPLETED,
        message=response_message,
        timestamp=datetime.now(timezone.utc).isoformat()
    )
    
    # Add a data artifact with known agents
    agents_artifact = Artifact(
        name="known_agents",
        description="List of known agents",
        parts=[
            DataPart(
                data={
                    "agent_count": len(known_agents),
                    "agents": [
                        {
                            "id": agent_id,
                            "name": card["name"] if isinstance(card, dict) else card.name,
                            "url": card["url"] if isinstance(card, dict) else card.url
                        } 
                        for agent_id, card in known_agents.items()
                    ]
                }
            )
        ]
    )
    
    task.artifacts = [agents_artifact]
    
    # Store updated task
    tasks[task_id] = task
    
    return task

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8001) 