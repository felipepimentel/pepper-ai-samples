---
description:
globs:
alwaysApply: true
---
# Project Structure

This document outlines the organization of the pepper-ai-samples project, which focuses on providing progressive examples for teaching MCP and A2A concepts.

## Directory Structure

```
pepper-ai-samples/
├── examples/           # All examples organized by protocol
│   ├── mcp/           # Progressive MCP examples
│   │   ├── 00-hello-world/      # Basic concepts
│   │   ├── 01-file-explorer/    # File handling
│   │   ├── 02-web-search/       # Web integration
│   │   ├── 03-database-query/   # Database operations
│   │   ├── 04-search-server/    # Search server
│   │   ├── 05-weather-server/   # Weather server
│   │   └── 06-integration-server/ # Integration server
│   │
│   ├── a2a/           # Progressive A2A examples
│   │   ├── 00-hello-world/      # Basic concepts
│   │   ├── 01-network/          # Agent communication
│   │   ├── 02-web/             # Web integration
│   │   └── 03-api-integration/ # API integration
│   │
│   └── integrated/    # A2A-MCP integration examples
│       ├── 00-basic-bridge/     # Basic protocol bridge
│       ├── 01-web-search/       # Integrated web search
│       └── 02-weather-insights/ # Complete use case
│
└── libs/              # Shared libraries
    ├── pepperpya2a/  # A2A library
    └── pepperpymcp/  # MCP library
```

## Example Structure

Each example must follow this standard structure:

```
XX-example-name/
├── src/
│   └── server.py    # Main implementation
├── README.md        # Concept explanation and tutorial
└── pyproject.toml   # Dependencies
```

## Shared Libraries

The `libs/` directory contains our core shared libraries:

1. **pepperpymcp**: MCP protocol implementation and utilities
   - Core MCP server functionality
   - Transport implementations
   - Common types and utilities

2. **pepperpya2a**: A2A protocol implementation and utilities
   - Core A2A agent functionality
   - Network communication
   - Agent discovery

## Learning Path

Examples are organized in a progressive learning path:

1. **MCP Path** (`examples/mcp/`):
   - 00: Basic concepts and setup
   - 01-03: Core functionality
   - 04-06: Advanced implementations

2. **A2A Path** (`examples/a2a/`):
   - 00: Basic agent concepts
   - 01-03: Agent capabilities

3. **Integration Path** (`examples/integrated/`):
   - 00: Basic protocol bridging
   - 01-02: Real-world applications

## Core Framework
```
common/
├── transport/        # MCP framework implementation
│   ├── mcp.py       # Core SimpleMCP class
│   ├── transports.py # Transport implementations
│   └── __init__.py  # Public exports
├── types/           # Shared type definitions
└── utils/           # Common utilities
```

## Example Structure
Each example follows this structure:
```
example-name/
├── src/             # Source code
│   └── server.py    # Main implementation
├── tests/           # Test files
│   ├── unit/       # Unit tests
│   ├── integration/ # Integration tests
│   └── e2e/        # End-to-end tests
├── resources/       # Static resources
└── pyproject.toml   # Project configuration
```

## Template Organization
```
templates/
├── email/          # Email templates
├── documents/      # Document templates
└── responses/      # API response templates
```

## Best Practices

1. **Directory Naming**
   - Use kebab-case for directory names
   - Prefix examples with numbers (e.g., `00-hello-world`)
   - Use descriptive, purpose-indicating names

2. **File Organization**
   - Keep related files together
   - Use appropriate subdirectories
   - Follow consistent naming patterns
   - Maintain clear separation of concerns

3. **Resource Management**
   - Store static resources in `resources/`
   - Use templates for dynamic content
   - Organize by resource type
   - Version control appropriate resources

4. **Configuration Files**
   - Place at project root level
   - Use standard names (e.g., pyproject.toml)
   - Include clear documentation
   - Separate dev and prod configs

## Implementation Guidelines

1. **Creating New Examples**
   ```bash
   # Create directory structure
   mkdir -p new-example/{src,tests,resources}
   
   # Initialize configuration
   cat > new-example/pyproject.toml << EOF
   [build-system]
   requires = ["hatchling"]
   build-backend = "hatchling.build"
   
   [project]
   name = "new-example"
   version = "0.1.0"
   description = "New MCP server example"
   EOF
   ```

2. **Adding Resources**
   ```bash
   # Create resource directories
   mkdir -p resources/{static,templates,data}
   
   # Add resource tracking
   echo "*.data binary" >> .gitattributes
   ```

3. **Template Usage**
   ```python
   from common.utils import load_template
   
   # Load and use template
   template = load_template("email/welcome.template")
   content = template.render(name="User")
   ```

## Directory Structure Validation

1. **Required Files**
   - README.md in each example
   - pyproject.toml for dependencies
   - server.py as main entry point
   - test_server.py for tests

2. **Optional Components**
   - resources/ for static files
   - templates/ for dynamic content
   - docs/ for extended documentation

## Example Categories

1. **Basic Examples (00-09)**
   - Core concepts
   - Simple implementations
   - Learning focused

2. **Intermediate Examples (10-19)**
   - Advanced features
   - Real-world patterns
   - Integration examples

3. **Advanced Examples (20+)**
   - Complex systems
   - Production patterns
   - Performance optimization

## Maintenance Guidelines

1. **Regular Tasks**
   - Update dependencies
   - Check for deprecated patterns
   - Validate directory structure
   - Clean up unused resources

2. **Version Control**
   - Include appropriate .gitignore
   - Track large files with Git LFS
   - Document branch structure
   - Maintain clean history

### Available Examples
1. [00-hello-world/](mdc:00-hello-world/server.py): Basic MCP server with tools, resources, and prompts
2. 01-file-explorer/: File system exploration
3. 02-web-search/: Web search integration
4. 03-database-query/: Database querying
5. 04-agent-system/: Agent-based system
6. 05-fraud-detection/: Fraud detection example

## Template Organization
- Templates must be in `templates/*.template`