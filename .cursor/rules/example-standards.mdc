---
description:
globs:
alwaysApply: true
---
# Example Standards

Each example in this repository should follow these standards to maintain consistency and quality.

## Required Components

Every example must include:

1. **Server Implementation**
   - Located at `src/server.py`
   - Well-documented with docstrings
   - Clear separation of concerns

2. **Testing Methods**
   - HTML client with UI (`client.html`)
   - Python client for programmatic access (`src/client.py`)
   - VS Code REST Client file (`api.http`)
   - Test script when appropriate (`src/test_server.py`)

3. **Documentation**
   - README.md with installation and usage instructions
   - VS Code setup instructions
   - API endpoint documentation
   - Example usage

4. **Configuration**
   - `pyproject.toml` with accurate dependencies
   - `.vscode/launch.json` with appropriate configurations

## Code Quality Standards

All examples should follow these code quality standards:

1. **Python Standards**
   - PEP 8 style guide
   - Type hints for all functions
   - Docstrings for all public functions and classes
   - Proper error handling

2. **Documentation**
   - Clear, concise documentation
   - Examples of all key features
   - Setup and installation instructions
   - Testing instructions

3. **API Design**
   - RESTful design principles
   - Proper status codes
   - Consistent response formats
   - Input validation

## Directory Structure

Follow the standard directory structure:

```
example-name/
├── src/                 # Source code
│   └── server.py        # Main server implementation
│   └── client.py        # API client
├── .vscode/             # VS Code configuration
├── tests/               # Test files
├── resources/           # Static resources
├── client.html          # Web client for API testing
├── api.http             # REST Client file for VS Code testing
└── pyproject.toml       # Project configuration with dependencies
```

## Progressive Learning

Examples should build on concepts introduced in previous examples. Follow this progression:

1. **Basic Concepts** (00-hello-world)
   - Simple API endpoints
   - Request/response handling
   - Basic documentation

2. **Intermediate Features** (01-03)
   - More complex API design
   - External integrations
   - Advanced error handling

3. **Advanced Applications** (04-05)
   - Complex systems
   - Multiple components
   - Real-world use cases
