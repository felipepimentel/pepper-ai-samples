---
description:
globs:
alwaysApply: false
---
# UV Usage Guide

## Introduction

UV is a modern Python package manager and build system with better performance and dependency resolution than traditional tools. This guide covers best practices for using UV with Pepper AI projects.

## Installation

```bash
# Install UV directly
curl -sSf https://astral.sh/uv/install.sh | bash

# Verify installation
uv --version
```

## Environment Management

### Creating Virtual Environments

```bash
# Create a new virtual environment
uv venv

# With specific Python version
uv venv --python=python3.10

# In specific location
uv venv .venv
```

### Activating Environments

```bash
# Activate virtual environment (Linux/macOS)
source .venv/bin/activate

# Activate virtual environment (Windows)
.venv\Scripts\activate
```

## Dependency Management

### Installing Project Dependencies

```bash
# Install from pyproject.toml
uv pip install -e .

# Install with dev dependencies
uv pip install -e ".[dev]"
```

### Adding New Dependencies

```bash
# Add dependencies
uv add fastapi uvicorn

# Add development dependencies
uv add --dev pytest black ruff
```

### Synchronizing Environment

```bash
# Update dependencies based on pyproject.toml
uv sync
```

## Project Configuration (pyproject.toml)

```toml
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "my-project"
version = "0.1.0"
description = "My project description"
requires-python = ">=3.10"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.23.2",
    "pydantic>=2.4.2",
    "mcp>=1.6.0",
    "pepperpymcp>=0.1.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.2",
    "black>=23.9.1",
    "ruff>=0.0.292",
    "mypy>=1.5.1",
]
```

## Running Code with UV

```bash
# Run a script with dependencies
uv run --with fastapi,uvicorn,pydantic my_script.py

# Run with specific Python version
uv run --python=python3.10 --with fastapi my_script.py
```

## Best Practices

1. **Use pyproject.toml**: Always define dependencies in pyproject.toml instead of requirements.txt
2. **Specify Version Ranges**: Use >= for minimum versions rather than pinning exact versions
3. **Verify Compatibility**: Test with different dependency versions to ensure compatibility
4. **Separate Dev Dependencies**: Use optional dependencies for development tools
5. **Use uv sync**: Keep your environment in sync with your pyproject.toml
6. **Commit pyproject.toml**: Include pyproject.toml in version control 

## Common Commands

```bash
# Install project in development mode
uv pip install -e .

# Install specific package version 
uv add fastapi==0.104.0

# List installed packages
uv pip list

# Find outdated packages
uv pip list --outdated

# Export dependencies
uv pip freeze > requirements.txt

# Clean cache
uv cache clean
```

## Troubleshooting

### Common Issues

1. **Package Not Found**: Ensure you're using a virtual environment with required packages installed
2. **Version Conflicts**: Use `uv pip install --report` to see dependency conflicts
3. **Environment Activation**: Check that your environment is activated (look for (.venv) in prompt)
4. **Cache Issues**: Try cleaning the UV cache with `uv cache clean`

### Setting Up a New Project

```bash
# Create and set up a new project
mkdir my-project
cd my-project
uv venv
source .venv/bin/activate
touch pyproject.toml  # Create and edit this file
uv sync  # After editing pyproject.toml
```

## Resources

- [UV Documentation](https://github.com/astral-sh/uv)
- [PEP 621: Storing project metadata in pyproject.toml](https://peps.python.org/pep-0621/)
- [Python Packaging User Guide](https://packaging.python.org/en/latest/)
